There are various things you need to do now to complete the cloning and setup
of your new web app.

1) Create a new repository for your project.  You can't commit it to the
	webapp-boiler repo! (actually that remote was removed to prevent you from
	doing so accidentally!)

2) Change the password for "appuser".  During setup, this is set to 'pass'.

2) Edit README, so that the remote install command points to your new 
	repository.

3) Edit `bin/ubuntu-setup.sh`, in the places indicated.

	`bin/ubuntu-setup.sh` at the locations indicated by comments, to reflect 
	your projects' information.  This will allow others to install your app
	on ubuntu hosts easily (otherwise the README would direct them to install
	the webapp-boilerplate!).

3) Edit `.env.dev` and add your domain name and your project name to it.

4) Create self-signed SSL certificates for development, and, once you have a 
	domain name for your webapp, obtain SSL certificates signed by letsencrypt.

5) The `.env.dev` file contains some secrets and passwords.  Of course, you'll
	need different (truly secret) passwords for production.  When you start the
	app in production mode, it will source those from a file called
	`.env.prod.gpg`, which you'll need to make.  If you just want to do a quick
	test-run in production mode, you can use the .env.prod.gpg file that is
	provided, which has the passphrase 'app'.

	To make a real `.env.prod.gpg`, run:

		`bin/make-env.sh`.  

	That script will copy over the non-secret environment variables in .env
	(like PROJECT_NAME AND HOST_NAME) unchanged, but it will substitute strong
	randomly generated passwords for the environment varibales that represent
	passwords.  It will write these variables to `.env.prod.gpg`.  You'll need
	to provide a passphrase which is used to unlock these environment variables
	when the app starts up in production mode.

	Don't commit your `.env.prod.gpg` file.  You can share it with people using 
	ssh or an other secure exchange method.  Even though it is encrypted, you 
	should also keep it restricted-access!

6) The `.keys.prod.gpg` and `.keys.dev.gpg` files:

	Any additional secrets you wish to associate to the app can be stored in 
	.keys.prod.gpg (for production) and .keys.dev.gpg (for development).  
	You could use this to store consumer keys for an OAuth-authenticated api 
	for example.


	
