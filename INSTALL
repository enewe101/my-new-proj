INSTALL

1) Install Docker CE for your operating system

2) Run ./bin/make-docker-images.sh

3) To start developing, run ./dev-start.sh

     - This starts two docker containers, one with node behind nginx,
       the other with mongodb.  Open up a browser and point it to localhost to
       see the running development instance of the app.

     - You can stop and remove these containers whenever you are done
       developing by running ./dev-stop.sh .  You don't need to do that,
	   though, because running ./dev-start.sh the next time will always clear
       out old containers that might be hanging around.  It's just there if you
       want to clear out the containers for any reason.

     - Whenever you make changes to server-side code, you'll want to restart
       the node server.  You can stop and restart just the node server hitting 
       ctrl-C and running ./dev-node-resume.sh in the terminal in which you 
       ran ./dev-start.sh

     - Changes to client side code are normally hot-reloaded, but sometimes
       you need to restart the node server in that case too.

   To start the production server, run ./bin/prod-start.sh

     - The production server runs in the background.

     - Stop it and remove the docker containers by ./bin/prod-stop.sh


Other notes:
~~~~~~~~~~~~
The production and development mongodb containers each rely on their own volume
to persist data.  Data will be persisted even when the mongo containers are
destroyed and recreated.  You can destroy the volumes by running
./bin/prod-mongo-rm-volume.sh or ./bin/dev-mongo-rm-volume.sh, in which case
they would be created freshly next time you started a mongo container.

When the production or development mongo volume is created (which happens
whenever a mongo container is started and no volume exists) data will be loaded
from the dumpfiles ./dump/prod-dump.js or ./dump/dev-dump.js .  Typically, the
contents of prod-dump.js would be the latest dump from the live app, while the
contents of dev-dump.js would be a small set of records useful for interacting
with the development instance of the app and running tests.  The dev-dump.js
will change less frequently, and would change to reflect changes to schemas or
to provide examples/tests of new functionality.
